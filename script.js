// –ñ–¥—ë–º, –ø–æ–∫–∞ DOM –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω
document.addEventListener('DOMContentLoaded', function() {
    // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
    const navLinks = document.querySelectorAll('nav ul li a');
    const backToTopButton = document.getElementById('back-to-top');
    const mobileMenuToggle = document.querySelector('.mobile-menu-toggle');
    const navMenu = document.querySelector('nav ul');
    const revealElements = document.querySelectorAll('.reveal');
    const themeToggle = document.querySelector('.theme-toggle');
    const cards = document.querySelectorAll('.card');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Ç–µ–º—É –∏–∑ localStorage
    if (localStorage.getItem('darkTheme') === 'true') {
        document.body.classList.add('dark-theme');
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã
    themeToggle.addEventListener('click', function() {
        document.body.classList.toggle('dark-theme');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (document.body.classList.contains('dark-theme')) {
            localStorage.setItem('darkTheme', 'true');
        } else {
            localStorage.setItem('darkTheme', 'false');
        }
    });

    // –ü–ª–∞–≤–Ω—ã–π —Å–∫—Ä–æ–ª–ª –ø–æ —è–∫–æ—Ä–Ω—ã–º —Å—Å—ã–ª–∫–∞–º
    navLinks.forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–±–∏–ª—å–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —Å—Å—ã–ª–∫—É
            if (navMenu.classList.contains('active')) {
                navMenu.classList.remove('active');
            }
            
            const href = this.getAttribute('href');
            const targetElement = document.querySelector(href);
            
            if (targetElement) {
                const offsetTop = targetElement.offsetTop - 80; // –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –≤—ã—Å–æ—Ç—ã —à–∞–ø–∫–∏
                
                window.scrollTo({
                    top: offsetTop,
                    behavior: 'smooth'
                });
            }
        });
    });

    // –ö–Ω–æ–ø–∫–∞ "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–≤–µ—Ä—Ö"
    window.addEventListener('scroll', function() {
        if (window.pageYOffset > 300) {
            backToTopButton.style.display = 'block';
        } else {
            backToTopButton.style.display = 'none';
        }
    });

    backToTopButton.addEventListener('click', function() {
        window.scrollTo({
            top: 0,
            behavior: 'smooth'
        });
    });

    // –ú–æ–±–∏–ª—å–Ω–æ–µ –º–µ–Ω—é
    mobileMenuToggle.addEventListener('click', function() {
        navMenu.classList.toggle('active');
    });

    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ (IntersectionObserver)
    if ('IntersectionObserver' in window) {
        const observerOptions = {
            root: null,
            rootMargin: '0px',
            threshold: 0.1
        };

        const observer = new IntersectionObserver(function(entries, observer) {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('active');
                    observer.unobserve(entry.target);
                }
            });
        }, observerOptions);

        revealElements.forEach(element => {
            observer.observe(element);
        });
    } else {
        // –î–ª—è –±—Ä–∞—É–∑–µ—Ä–æ–≤, –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏—Ö IntersectionObserver, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        revealElements.forEach(element => {
            element.classList.add('active');
        });
    }

    // –ê–Ω–∏–º–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ü—Ä–æ–±–ª–µ–º—ã" - –ø–æ –∫–ª–∏–∫—É –≤–º–µ—Å—Ç–æ –Ω–∞–≤–µ–¥–µ–Ω–∏—è
    cards.forEach(card => {
        // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
        let isFlipped = false;
        const cardInner = card.querySelector('.card-inner');
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
        card.addEventListener('click', function() {
            if (!isFlipped) {
                // –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
                cardInner.style.transform = 'rotateY(180deg)';
                isFlipped = true;
            } else {
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
                cardInner.style.transform = 'rotateY(0deg)';
                isFlipped = false;
            }
        });
    });

    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª—è —à–∞–ø–∫–∏ –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ
    const header = document.querySelector('header');
    
    window.addEventListener('scroll', function() {
        if (window.scrollY > 50) {
            header.style.backgroundColor = document.body.classList.contains('dark-theme') 
                ? 'rgba(34, 34, 34, 0.95)' 
                : 'rgba(255, 255, 255, 0.95)';
            header.style.boxShadow = '0 2px 10px rgba(0, 0, 0, 0.1)';
        } else {
            header.style.backgroundColor = 'var(--bg-color)';
            header.style.boxShadow = 'var(--shadow)';
        }
    });

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ "–ö–∞–∫ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–µ–±–µ"
    function addSelfAwarenessSection() {
        const heroSection = document.querySelector('.hero');
        if (!heroSection) return;

        const selfAwarenessSection = document.createElement('section');
        selfAwarenessSection.id = 'self-awareness';
        selfAwarenessSection.className = 'section';
        
        selfAwarenessSection.innerHTML = `
            <div class="container">
                <h2 class="section-title">‚ú® –ö–∞–∫ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–µ–±–µ: –º—ã—Å–ª–∏, —á—É–≤—Å—Ç–≤–∞, –¥–µ–π—Å—Ç–≤–∏—è</h2>
                
                <div class="chain-container">
                    <!-- –ë–ª–æ–∫ "–ú—ã—Å–ª–∏" -->
                    <div class="chain-item reveal">
                        <div class="chain-icon">üí≠</div>
                        <h3>–ú—ã—Å–ª–∏</h3>
                        <p>–£ –∫–∞–∂–¥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –≤–æ–∑–Ω–∏–∫–∞—é—Ç –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –º—ã—Å–ª–∏ –∏ —É–±–µ–∂–¥–µ–Ω–∏—è, —Ñ–æ—Ä–º–∏—Ä—É—é—â–∏–µ –µ–≥–æ –∫–∞—Ä—Ç–∏–Ω—É –º–∏—Ä–∞.</p>
                        <div class="examples">
                            <p class="example-thought">¬´–£ –º–µ–Ω—è –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è¬ª</p>
                            <p class="example-thought">¬´–ú–µ–Ω—è –Ω–∏–∫—Ç–æ –Ω–µ –ª—é–±–∏—Ç¬ª</p>
                            <p class="example-thought">¬´–Ø –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ª—É—á—à–∏–º¬ª</p>
                        </div>
                    </div>
                    
                    <!-- –°—Ç—Ä–µ–ª–∫–∞ -->
                    <div class="chain-arrow">‚Üí</div>
                    
                    <!-- –ë–ª–æ–∫ "–ß—É–≤—Å—Ç–≤–∞" -->
                    <div class="chain-item reveal">
                        <div class="chain-icon">‚ù§Ô∏è</div>
                        <h3>–ß—É–≤—Å—Ç–≤–∞ (—ç–º–æ—Ü–∏–∏)</h3>
                        <p>–ú—ã—Å–ª–∏ –≤—Å–µ–≥–¥–∞ –≤—ã–∑—ã–≤–∞—é—Ç –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –ø–µ—Ä–µ–∂–∏–≤–∞–µ–º –Ω–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–º —É—Ä–æ–≤–Ω–µ.</p>
                        <div class="examples">
                            <p class="example-emotion">–°—Ç—Ä–∞—Ö</p>
                            <p class="example-emotion">–¢—Ä–µ–≤–æ–≥–∞</p>
                            <p class="example-emotion">–ì—Ä—É—Å—Ç—å</p>
                            <p class="example-emotion">–°—Ç—ã–¥</p>
                        </div>
                    </div>
                    
                    <!-- –°—Ç—Ä–µ–ª–∫–∞ -->
                    <div class="chain-arrow">‚Üí</div>
                    
                    <!-- –ë–ª–æ–∫ "–î–µ–π—Å—Ç–≤–∏—è" -->
                    <div class="chain-item reveal">
                        <div class="chain-icon">üö∂‚Äç‚ôÇÔ∏è</div>
                        <h3>–î–µ–π—Å—Ç–≤–∏—è</h3>
                        <p>–≠–º–æ—Ü–∏–∏ –ø—Ä–∏–≤–æ–¥—è—Ç –Ω–∞—Å –∫ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º –¥–µ–π—Å—Ç–≤–∏—è–º –∏ —Ä–µ–∞–∫—Ü–∏—è–º, —á–∞—Å—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –∏ –Ω–µ–æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–º.</p>
                        <div class="examples">
                            <p class="example-action">–ò–∑–±–µ–≥–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–π</p>
                            <p class="example-action">–£–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤–µ—â–µ—Å—Ç–≤</p>
                            <p class="example-action">–°–∞–º–æ–∏–∑–æ–ª—è—Ü–∏—è</p>
                            <p class="example-action">–°–∞–º–æ—Å–∞–±–æ—Ç–∞–∂</p>
                        </div>
                    </div>
                </div>
                
                <!-- –ë–ª–æ–∫ "–ó–∞—á–µ–º —ç—Ç–æ –Ω—É–∂–Ω–æ?" -->
                <div class="why-block reveal">
                    <div class="why-icon">üéØ</div>
                    <h3>–ó–∞—á–µ–º —ç—Ç–æ –Ω—É–∂–Ω–æ?</h3>
                    <p>–ö–æ–≥–¥–∞ —á–µ–ª–æ–≤–µ–∫ –æ—Å–æ–∑–Ω–∞—ë—Ç —Å–≤—è–∑—å –º–µ–∂–¥—É —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏, —á—É–≤—Å—Ç–≤–∞–º–∏ –∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏, –æ–Ω —Å–ø–æ—Å–æ–±–µ–Ω –∏–∑–º–µ–Ω–∏—Ç—å –µ—ë. –ó–∞–º–µ–Ω–∏–≤ –Ω–µ–≥–∞—Ç–∏–≤–Ω—É—é –º—ã—Å–ª—å –Ω–∞ –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—É—é, —á–µ–ª–æ–≤–µ–∫ –æ–±—Ä–µ—Ç–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–∏—Ç—å —ç–º–æ—Ü–∏–∏ –∏ –ø–æ—Å—Ç—É–ø–∞—Ç—å –∏–Ω–∞—á–µ, —Å–≤–æ–±–æ–¥–Ω–µ–µ –∏ —Å—á–∞—Å—Ç–ª–∏–≤–µ–µ.</p>
                </div>
            </div>
        `;
        
        // –í—Å—Ç–∞–≤–ª—è–µ–º —Å–µ–∫—Ü–∏—é –ø–æ—Å–ª–µ hero –∏ –ø–µ—Ä–µ–¥ problems
        heroSection.after(selfAwarenessSection);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ—è–≤–ª–µ–Ω–∏—è
        setupIntersectionObserver();
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ IntersectionObserver –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ
    function setupIntersectionObserver() {
        const options = {
            root: null,
            rootMargin: '0px',
            threshold: 0.1
        };

        const observer = new IntersectionObserver((entries, observer) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('active');
                    observer.unobserve(entry.target);
                }
            });
        }, options);

        const elements = document.querySelectorAll('.reveal');
        elements.forEach(el => {
            observer.observe(el);
        });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—Ü–∏—é –ø—Ä–æ –º—ã—Å–ª–∏, —á—É–≤—Å—Ç–≤–∞ –∏ –¥–µ–π—Å—Ç–≤–∏—è
    addSelfAwarenessSection();
});
